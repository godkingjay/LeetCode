impl Solution {
    pub fn num_distinct(s: String, t: String) -> i32 {
        let m = s.len();
        let n = t.len();
        let s_bytes = s.as_bytes();
        let t_bytes = t.as_bytes();

        if m < n {
            return 0;
        }

        let mut dp = vec![vec![0; n + 1]; m + 1];

        for i in 0..=m {
            dp[i][0] = 1;
        }

        for i in 1..=m {
            for j in 1..=n {
                if s_bytes[i - 1] == t_bytes[j - 1] {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        dp[m][n]
    }
}
